<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-asilvas-http-push-assets-00" category="exp">

  <front>
    <title abbrev="Push-Assets">Push-Assets Header Field</title>

    <author initials="A." surname="Silvas" fullname="Aaron Silvas">
      <organization>GoDaddy</organization>
      <address>
        <email>asilvas@godaddy.com</email>
      </address>
    </author>

    <date year="2016" month="June" day="TBD"/>

    <area>General</area>

    <keyword>Internet-Draft</keyword>
    <keyword>Push</keyword>

    <abstract>

    <t><spanx style="verb">Push-Assets</spanx> header combined with child headers
    <spanx style="verb">Push-Asset-Key</spanx> and <spanx style="verb">Push-Asset-Match</spanx>
    provide necessary state to be negogiated between client and server, enabling efficient usage
    of <spanx style="verb">Server Push</spanx> on every request.</t>

    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>As described in <xref target="HighPerformance"/>, transfer sizes and document requests continue to
increase. While network conditions continue to improve, resulting in lower latencies and increased
bandwidth, HTTP/1.1 (<xref target="RFC7230"/> and <xref target="RFC7231"/>) fails to address the
underlining problem of document dependencies and the resulting "waterfall" of blocked requests.</t>

<t>HTTP/2 <xref target="RFC7540"/> aims to address some of these problems, by way of Streams and
Multiplexing, combined with HTTP/2 <xref target="RFC7540"/> Server Push. A ruthless combination,
addressing "head-of-line blocking" through Multiplexing, and optimist pre-loading by way of
Server Push.</t>

<t>Where <spanx style="verb">Server Push</spanx> begins to fall short is around client state, leaving
it up to servers to leverage existing HTTP State Management Mechanism <xref target="RFC6265"/> with
Cookies, which are not purpose built to solve the problem of document dependency state. This lack of
client state can result in HTTP/2 <xref target="RFC7540"/> <spanx style="verb">RST_STREAM</spanx>,
where-in in-flight <spanx style="verb">Server Push</spanx> Streams will be cancelled, incurring client
and server waste.</t>

<t>This document aims to address document dependency state by looking to Caching <xref target="RFC7234"/>
familiar with existing HTTP/1.1 requests (see <xref target="RFC7230"/> and <xref target="RFC7231"/>). By
pulling this state data into the parent request, servers are able to intellegently and
responsibly <spanx style="verb">Server Push</spanx> only missing or outdated dependencies.</t>


<section anchor="Terminology" title="Terminology">

<t>In this document, the key words “MUST”, “MUST NOT”, “REQUIRED”,
“SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”,
and “OPTIONAL” are to be interpreted as described in BCP 14, RFC 2119
<xref target="RFC2119"/> and indicate requirement levels for compliant implementations.</t>

<t>This document uses the Augmented BNF defined in <xref target="RFC5234"/>.</t>

</section>
</section>


<section anchor="understanding-the-problem" title="Understanding The Problem">

  <t>Here we can begin to see the problem with vanilla HTTP/2 <xref target="RFC7540"/>
  Server Push using one of many custom cookie-based implementations.</t>

<figure align="center" anchor="xml_problem">
<preamble>The problem.</preamble>

<artwork align="left"><![CDATA[

  +---------------+------------------+
  |  Empty Cache  | Request A        |
  +---------------+------------------+
                  | PUSH_PROMISE A1  |
                  +------------------+
                  | PUSH_PROMISE AB1 |
                  +------------------+
                  | Response A       |
  +---------------+------------------+
  | Partial Cache | Request B        |
  +---------------+------------------+
                  | PUSH_PROMISE B1  |
                  +------------------+
                  | PUSH_PROMISE AB1 | <== EVIL
                  +------------------+
                  | Response B       |
                  +------------------+
                  | RST_STREAM AB1   | <== EVIL
                  +------------------+

]]></artwork>

<postamble></postamble>
</figure>

  <t>With <spanx style="verb">Push-Assets</spanx> enabled both client and server adhere to a
  strict dependency state contract.</t>

<figure align="center" anchor="xml_solution">
<preamble>The solution.</preamble>

<artwork align="left"><![CDATA[

  +---------------+------------------+
  |  Empty Cache  | Request A        |
  +---------------+------------------+
                  | PUSH_PROMISE A1  |
                  +------------------+
                  | PUSH_PROMISE AB1 |
                  +------------------+
                  | Response A       |
  +---------------+------------------+
  | Partial Cache | Request B        |
  +---------------+------------------+
                  | PUSH_PROMISE B1  |
                  +------------------+
                  | Response B       |
                  +------------------+

]]></artwork>

<postamble></postamble>
</figure>

</section>


<section anchor="push-assets-use-cases" title="Push Assets Use Cases">

<section anchor="first-load-experience" title="First Load Experience">

  <t>TODO</t>

</section>

<section anchor="subsequent-load-experience" title="Subsequent Load Experience">

  <t>TODO</t>

</section>

<section anchor="proxy-optimization" title="Proxy Optimization">

  <t>TODO</t>

</section>

<section anchor="non-browser-clients" title="Non-Browser Clients">

  <t>TODO</t>

</section>

<section anchor="alternative-document-formats" title="Alternative Document Formats">

  <t>TODO</t>

</section>

</section>



<section anchor="push-assets-header" title="Push-Assets Header">

<figure><artwork><![CDATA[
Push-Assets = [*][Asset-Key=Caching-Headers][;Asset-Key=Caching-Headers]
]]></artwork></figure>

  <t>A REQUIRED Request Header.</t>

  <t>Comprised of zero or more <spanx style="verb">Assets</spanx> addressed by their
  <spanx style="verb">Asset Key</spanx>.</t>
  
  <t>An <spanx style="verb">Asset-Key</spanx> is the name of the asset uniquely identifiable by the
  document or matching documents.</t>
  
<section anchor="caching-headers" title="Caching Headers">

<figure><artwork><![CDATA[
Push-Assets = Asset-Key=[etag(etag-value),][last-modified(date)][no-push]
]]></artwork></figure>

  <t>Caching MAY include an <spanx style="verb">ETag</spanx>, and/or <spanx style="verb">Last-Modified</spanx>, or
  <spanx style="verb">No-Push</spanx>. This provides necessary client state of dependencies to server.</t>

</section>
  
<section anchor="empty-cache-request" title="Empty Cache Request">

<figure><artwork><![CDATA[
Push-Assets = *
]]></artwork></figure>

<t>Where <spanx style="verb">*</spanx> informs server to Push all push-enabled dependencies,
if <spanx style="verb">Push-Assets</spanx> is enabled. Servers are NOT required to push any
or all dependencies, but MUST push all missing or outdated push-enabled assets.</t>

</section>

</section>

<section anchor="push-asset-key-header" title="Push-Asset-Key Header">

<figure><artwork><![CDATA[
Push-Asset-Key = [$][Asset-Key]
]]></artwork></figure>

  <t>A REQUIRED <spanx style="verb">PUSH_PROMISE</spanx> Response Header.</t>

  <t>Unlike the <spanx style="verb">Asset-Key</spanx> in a Request, the
  <spanx style="verb">Push-Asset-Key Header</spanx> corresponds to the Key of the <spanx style="verb">PUSH_PROMISE</spanx>
  Response.</t>

<section anchor="push-asset-key-named" title="Named Key">

<figure><artwork><![CDATA[
Push-Asset-Key = core-bundle.js
]]></artwork></figure>

<t>By naming an asset, you MAY share that asset across multiple documents, and MAY change the URL as necessary.</t>

</section>

<section anchor="push-asset-key-url" title="Key from URL">

<figure><artwork><![CDATA[
Push-Asset-Key = $
]]></artwork></figure>

<t>Where <spanx style="verb">$</spanx> is reserved as a short-hand for the client to recognize the key
as the URL Path, and MUST NOT include the querystring.</t>

<t>Example URL of <spanx style="verb">/my/document?some=thing</spanx> would by keyed as <spanx style="verb">/my/document</spanx>.</t>

</section>

</section>

<section anchor="push-asset-match-header" title="Push-Asset-Match Header">

<figure><artwork><![CDATA[
Push-Asset-Match = Asset-Match
]]></artwork></figure>

  <t>An OPTIONAL <spanx style="verb">PUSH_PROMISE</spanx> Response Header.</t>

  <t>An Asset-Match supports the lexical pattern of the URL (minus querystring) to match, and MAY end by reserved
  wildcard <spanx style="verb">*</spanx> to indicate matching all requests "equal or greater than" the URL (minus querystring).</t>

<section anchor="push-asset-match-partial" title="Match Similar Requests">

<figure><artwork><![CDATA[
Push-Asset-Match = /some-path/*
]]></artwork></figure>

<t>Where all requests with URL (minus querystring) greater than or equal to <spanx style="verb">/some-path/</spanx> will be matched.</t>

</section>

<section anchor="push-asset-match-all" title="Match All Requests">

<figure><artwork><![CDATA[
Push-Asset-Match = *
]]></artwork></figure>

<t><spanx style="verb">*</spanx> by itself corresponds to "match all requests".</t>

</section>

</section>




  </middle>

  <back>

  <references title='Normative References'>



<reference  anchor='RFC2119' target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor='RFC5234' target='http://www.rfc-editor.org/info/rfc5234'>
<front>
<title>Augmented BNF for Syntax Specifications: ABNF</title>
<author initials='D.' surname='Crocker' fullname='D. Crocker' role='editor'><organization /></author>
<author initials='P.' surname='Overell' fullname='P. Overell'><organization /></author>
<date year='2008' month='January' />
<abstract><t>Internet technical specifications often need to define a formal syntax.  Over the years, a modified version of Backus-Naur Form (BNF), called Augmented BNF (ABNF), has been popular among many Internet specifications.  The current specification documents ABNF. It balances compactness and simplicity with reasonable representational power.  The differences between standard BNF and ABNF involve naming rules, repetition, alternatives, order-independence, and value ranges.  This specification also supplies additional rule definitions and encoding for a core lexical analyzer of the type common to several Internet specifications.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='68'/>
<seriesInfo name='RFC' value='5234'/>
<seriesInfo name='DOI' value='10.17487/RFC5234'/>
</reference>



<reference  anchor='RFC7540' target='http://www.rfc-editor.org/info/rfc7540'>
<front>
<title>Hypertext Transfer Protocol Version 2 (HTTP/2)</title>
<author initials='M.' surname='Belshe' fullname='M. Belshe'><organization /></author>
<author initials='R.' surname='Peon' fullname='R. Peon'><organization /></author>
<author initials='M.' surname='Thomson' fullname='M. Thomson' role='editor'><organization /></author>
<date year='2015' month='May' />
<abstract><t>This specification describes an optimized expression of the semantics of the Hypertext Transfer Protocol (HTTP), referred to as HTTP version 2 (HTTP/2).  HTTP/2 enables a more efficient use of network resources and a reduced perception of latency by introducing header field compression and allowing multiple concurrent exchanges on the same connection.  It also introduces unsolicited push of representations from servers to clients.</t><t>This specification is an alternative to, but does not obsolete, the HTTP/1.1 message syntax.  HTTP's existing semantics remain unchanged.</t></abstract>
</front>
<seriesInfo name='RFC' value='7540'/>
<seriesInfo name='DOI' value='10.17487/RFC7540'/>
</reference>




    </references>

    <references title='Informative References'>



<reference  anchor='RFC7230' target='http://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor='RFC6265' target='http://www.rfc-editor.org/info/rfc6265'>
<front>
<title>HTTP State Management Mechanism</title>
<author initials='A.' surname='Barth' fullname='A. Barth'><organization /></author>
<date year='2011' month='April' />
<abstract><t>This document defines the HTTP Cookie and Set-Cookie header fields. These header fields can be used by HTTP servers to store state (called cookies) at HTTP user agents, letting the servers maintain a stateful session over the mostly stateless HTTP protocol.  Although cookies have many historical infelicities that degrade their security and privacy, the Cookie and Set-Cookie header fields are widely used on the Internet.  This document obsoletes RFC 2965.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6265'/>
<seriesInfo name='DOI' value='10.17487/RFC6265'/>
</reference>




<reference  anchor='RFC7234' target='http://www.rfc-editor.org/info/rfc7234'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Caching</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines HTTP caches and the associated header fields that control cache behavior or indicate cacheable response messages.</t></abstract>
</front>
<seriesInfo name='RFC' value='7234'/>
<seriesInfo name='DOI' value='10.17487/RFC7234'/>
</reference>




<reference  anchor='RFC7231' target='http://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>


<reference anchor="HighPerformance" >
  <front>
    <title>High Performance Browser Networking</title>
    <author initials="I." surname="Grigorik" fullname="Ilya Grigorik">
      <organization></organization>
    </author>
    <date year="2013" month="September"/>
  </front>
</reference>


  </references>




  </back>
</rfc>
